import random
from html import escape

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import CallbackContext, CallbackQueryHandler, CommandHandler

from Vizxer import application, db
from Vizxer import pm_users as collection
from Vizxer import SUPPORT_CHAT, SUPPORT_CHAT as SUPPORT_CHANNEL, BOT_USERNAME, CHARA_CHANNEL_ID as LOGGER_ID

OWNER_USERNAME = "tanjiro_x_coder"

IMG_URL = [
    "https://telegra.ph/file/d1f294924efee2878bfab.jpg",
    "https://telegra.ph/file/f8d968800cfd9fcf8dc81.jpg",
    "https://telegra.ph/file/d9a754538b65191932da1.jpg"
]

async def start(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    first_name = update.effective_user.first_name
    username = update.effective_user.username

    user_data = await collection.find_one({"_id": user_id})

    if user_data is None:
        await collection.insert_one({"_id": user_id, "first_name": first_name, "username": username})
        await context.bot.send_message(chat_id=LOGGER_ID,
                                       text=f"New user Started The Bot..\n User: <a href='tg://user?id={user_id}'>{escape(first_name)}</a>",
                                       parse_mode='HTML')
    else:
        if user_data['first_name'] != first_name or user_data['username'] != username:
            await collection.update_one({"_id": user_id}, {"$set": {"first_name": first_name, "username": username}})

    if update.effective_chat.type == "private":
        caption = f"""
ü¶ã …¢ Ä·¥á·¥á·¥õ…™…¥…¢s {first_name}, …™'·¥ç {BOT_USERNAME}, …¥…™·¥Ñ·¥á ·¥õ·¥è ·¥ç·¥á·¥á·¥õ  è·¥è·¥ú!üíû
‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞
‚å• ·¥° ú·¥Ä·¥õ ·¥Ñ·¥Ä…¥ …™ ·¥Ö·¥è ? ü§î
‚ñ∏ …™ ·¥Ñ·¥Ä…¥ s·¥ò·¥Ä·¥°…¥ ·¥°·¥Ä…™“ì·¥ús …™…¥  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ·¥Ñ ú·¥Ä·¥õs “ì·¥è Ä …¢ Ä·¥è·¥ú·¥ò ·¥Ñ ú·¥Ä·¥õ ·¥ús·¥á Äs ·¥õ·¥è ·¥Ä·¥õ·¥õ·¥Ä…™…¥ ·¥õ ú·¥á·¥ç. üòç
‚å•  ú·¥è·¥°  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥ç·¥á ? üßê
‚ñ∏ ·¥Ä·¥Ö·¥Ö ·¥ç·¥á …™…¥  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ·¥Ñ ú·¥Ä·¥õs ·¥Ä…¥·¥Ö ·¥Ñ ü…™·¥Ñ·¥ã ·¥õ ú·¥á “ì·¥è ü ü·¥è·¥°…™…¥…¢  ú·¥á ü·¥ò  ô·¥ú·¥õ·¥õ·¥è…¥ “ì·¥è Ä ·¥ç·¥è Ä·¥á ·¥Ö·¥á·¥õ·¥Ä…™ üs. ü§ó
‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞
"""
        keyboard = [
            [InlineKeyboardButton("ADD ME", url=f'http://t.me/{BOT_USERNAME}?startgroup=new')],
            [InlineKeyboardButton("SUPPORT", url=f'https://t.me/{SUPPORT_CHAT}'),
             InlineKeyboardButton("UPDATES", url=f'https://t.me/{SUPPORT_CHANNEL}')],
            [InlineKeyboardButton("HELP", callback_data='help')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        photo_url = random.choice(IMG_URL)
        await context.bot.send_photo(chat_id=update.effective_chat.id, photo=photo_url, caption=caption, reply_markup=reply_markup, parse_mode='markdown')

    else:
        photo_url = random.choice(IMG_URL)
        keyboard = [
            [InlineKeyboardButton("ADD ME", url=f'http://t.me/{BOT_USERNAME}?startgroup=new')],
            [InlineKeyboardButton("SUPPORT", url=f'https://t.me/{SUPPORT_CHAT}'),
             InlineKeyboardButton("UPDATES", url=f'https://t.me/{SUPPORT_CHANNEL}')],
            [InlineKeyboardButton("HELP", callback_data='help')]
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_photo(chat_id=update.effective_chat.id, photo=photo_url, caption="üé¥Alive!?... \n connect to me in PM For more information ",reply_markup=reply_markup)

async def button(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()

    if query.data == 'help':
        help_text = """
        H·¥á ü·¥ò S·¥á·¥Ñ·¥õ…™·¥è…¥:
        /attain: T·¥è A·¥õ·¥õ·¥Ä…™…¥ C ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á Ä (·¥è…¥ ü è ·¥°·¥è Ä·¥ãs …™…¥ …¢ Ä·¥è·¥ú·¥òs)
        /fav : A·¥Ö·¥Ö Y·¥è·¥ú Ä F·¥Ä·¥†
        /trade : T·¥è T Ä·¥Ä·¥Ö·¥á C ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á Äs
        /gift : G…™·¥†·¥á A…¥ è C ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á Ä F Ä·¥è·¥ç Y·¥è·¥ú Ä C·¥è ü ü·¥á·¥Ñ·¥õ…™·¥è…¥ T·¥è A…¥·¥è·¥õ ú·¥á Ä Us·¥á Ä.. (·¥è…¥ ü è ·¥°·¥è Ä·¥ãs …™…¥ …¢ Ä·¥è·¥ú·¥òs)
        /collection : T·¥è S·¥á·¥á Y·¥è·¥ú Ä C·¥è ü ü·¥á·¥Ñ·¥õ…™·¥è…¥
        /topgroups : S·¥á·¥á T·¥è·¥ò G Ä·¥è·¥ú·¥òs W ú·¥á Ä·¥á Us·¥á Äs A·¥õ·¥õ·¥Ä…™…¥s M·¥ès·¥õ I…¥ T ú·¥Ä·¥õ G Ä·¥è·¥ú·¥ò
        /top : T·¥è·¥è S·¥á·¥á T·¥è·¥ò Us·¥á Äs
        /ctop : Y·¥è·¥ú Ä C ú·¥Ä·¥õ T·¥è·¥ò
        /changetime : C ú·¥Ä…¥…¢·¥á C ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á Ä S·¥ò·¥Ä·¥°…¥ T…™·¥ç·¥á (·¥è…¥ ü è ·¥°·¥è Ä·¥ãs …™…¥ …¢ Ä·¥è·¥ú·¥òs)
        """
        help_keyboard = [[InlineKeyboardButton("‚§æ B·¥Ä·¥Ñ·¥ã", callback_data='back')]]
        reply_markup = InlineKeyboardMarkup(help_keyboard)

        await context.bot.edit_message_caption(chat_id=update.effective_chat.id, message_id=query.message.message_id, caption=help_text, reply_markup=reply_markup, parse_mode='markdown')

    elif query.data == 'back':

        caption = f"""
        ü¶ã …¢ Ä·¥á·¥á·¥õ…™…¥…¢s {first_name}, …™'·¥ç {BOT_USERNAME}, …¥…™·¥Ñ·¥á ·¥õ·¥è ·¥ç·¥á·¥á·¥õ  è·¥è·¥ú!üíû
        ‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞
        ‚å• ·¥° ú·¥Ä·¥õ ·¥Ñ·¥Ä…¥ …™ ·¥Ö·¥è ? ü§î
        ‚ñ∏ …™ ·¥Ñ·¥Ä…¥ s·¥ò·¥Ä…¥ ·¥°·¥Ä…™“ì·¥ús …™…¥  è·¥è·¥ú Ä ·¥Ñ ú·¥Ä·¥õs “ì·¥è Ä …¢ Ä·¥è·¥ú·¥ò ·¥Ñ ú·¥Ä·¥õ ·¥ús·¥á Äs ·¥õ·¥è ·¥Ä·¥õ·¥õ·¥Ä…™…¥ ·¥õ ú·¥á·¥ç. üòç
        ‚å•  ú·¥è·¥°  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥ç·¥á ? üßê
        ‚ñ∏ ·¥Ä·¥Ö·¥Ö ·¥ç·¥á …™…¥  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ·¥Ñ ú·¥Ä·¥õs ·¥Ä…¥·¥Ö ·¥Ñ ü…™·¥Ñ·¥ã ·¥õ ú·¥á “ì·¥è ü ü·¥è·¥°…™…¥…¢  ú·¥á ü·¥ò  ô·¥ú·¥õ·¥õ·¥è…¥ “ì·¥è Ä ·¥ç·¥è Ä·¥á ·¥Ö·¥á·¥õ·¥Ä…™ üs. ü§ó
        ‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞
        """

        keyboard = [
            [InlineKeyboardButton("ADD ME", url=f'http://t.me/{BOT_USERNAME}?startgroup=new')],
            [InlineKeyboardButton("SUPPORT", url=f'https://t.me/{SUPPORT_CHAT}'),
             InlineKeyboardButton("UPDATES", url=f'https://t.me/{SUPPORT_CHANNEL}')],
            [InlineKeyboardButton("HELP", callback_data='help')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await context.bot.edit_message_caption(chat_id=update.effective_chat.id, message_id=query.message.message_id, caption=caption, reply_markup=reply_markup, parse_mode='markdown')

application.add_handler(CallbackQueryHandler(button, pattern='^help$|^back$', block=False))
start_handler = CommandHandler('start', start, block=False)
application.add_handler(start_handler)
